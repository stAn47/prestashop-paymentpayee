name: Build & Release PrestaShop Module

on:
  push:
  pull_request:
  workflow_dispatch:   # allows manual trigger from GitHub UI

jobs:
  deploy:
    name: Build dependencies & create artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Composer packages
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-dev -o

      - name: Clean-up project
        uses: PrestaShopCorp/github-action-clean-before-deploy@v1.0

      - name: Prepare auto-index tool
        run: composer global require prestashop/autoindex

      - name: Generate index.php
        run: ~/.composer/vendor/bin/autoindex

      - name: Upload artifact for release step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: ../

  update_release_draft:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}

      - id: release_info
        uses: toolmantim/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare for Release (PrestaShop ZIP)
        run: |
          mkdir package
          mv ${{ github.event.repository.name }} package/paymentpayee
          cd package
          zip -r paymentpayee.zip paymentpayee \
            -x '*.git*' '*.github*' '*/tests/*' '*/docs/*'
          mv paymentpayee.zip ../

      - name: Clean existing assets
        shell: bash
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          assets=$(bin/hub api -t repos/${{ github.repository }}/releases/${{ steps.release_info.outputs.id }}/assets | awk '/\].url/ { print $2 }')
          for asset in $assets; do
            bin/hub api -X DELETE $asset
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ./paymentpayee.zip
          asset_name: paymentpayee.zip
          asset_content_type: application/zip
